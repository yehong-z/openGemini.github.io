import{_ as u,X as m,Y as v,Z as e,a1 as s,$ as n,a0 as a,a3 as t,C as r}from"./framework-a4aa538b.js";const g={},k=e("h1",{id:"行协议写入教程",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#行协议写入教程","aria-hidden":"true"},"#"),s(" 行协议写入教程")],-1),h=t(`<p>这里将描述如何将数据输入到openGemini 数据库以及openGemini如何处理line procotol重复数据。</p><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h2><p>Line protocol 格式的单行文本代表openGemini中的一个point，它将point的measurement、tag set，field set以及timestamp通知给openGemini</p><p>以下代码块显示了line procotol示例，并将其分解为各个组件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>weather,location=us-midwest temperature=82 1465839830100400200
  |    -------------------- --------------  |
  |             |             |             |
  |             |             |             |
+-----------+--------+-+---------+-+---------+
|measurement|,tag_set| |field_set| |timestamp|
+-----------+--------+-+---------+-+---------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遍历图中每个元素:</p><h3 id="measurement" tabindex="-1"><a class="header-anchor" href="#measurement" aria-hidden="true">#</a> Measurement</h3><p>要写入数据的measurement名称，根据line procotol 生成measurement。</p><p>在示例中，measurement的名称weather。</p><h3 id="tag-set" tabindex="-1"><a class="header-anchor" href="#tag-set" aria-hidden="true">#</a> Tag set</h3><p>数据point 包含的tag 。 <strong>tag是可选的</strong>。</p><div class="hint-container warning"><p class="hint-container-title">Note</p><p>避免使用保留键 <code>_field</code>, <code>_measurement</code>, 和 <code>time</code>。如果保留的关键字作为tag 或者field的键，则相关联的数据点将被丢弃。</p></div><p>请注意，measurement 和 tag set由逗号分隔，没有空格。</p><p>用等号<code>=</code>分隔 <code>tag key</code>-<code>tag value</code>，不要有空格，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;tag_key&gt;=&lt;tag_value&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用逗号分隔多个 <code>tag key</code>-<code>tag value</code>对，且没有空格:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;tag_key&gt;=&lt;tag_value&gt;,&lt;tag_key&gt;=&lt;tag_value&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在示例中，<strong>tag set</strong> 由一个标记组成：<code>location=us-midwest</code>。如果向示例中添加另一个tag:<code>season=summer</code>，如下所示:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>weather,location=us-midwest,season=summer temperature=82 1465839830100400200
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,19),b=e("strong",null,"tag_key",-1),w={href:"http://golang.org/pkg/bytes/#Compare",target:"_blank",rel:"noopener noreferrer"},x=t(`<h3 id="空格-i" tabindex="-1"><a class="header-anchor" href="#空格-i" aria-hidden="true">#</a> 空格 I</h3><p>将measurement和field set 分开，或者如果要在数据point中包含tag set ，请使用空格将tag set和field set 分开。</p><p>没有设置tag 的有效line procotol:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>weather temperature=82 1465839830100400200
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="field-set" tabindex="-1"><a class="header-anchor" href="#field-set" aria-hidden="true">#</a> Field set</h3><p>每个point 都需要在 line protocol中至少有一个field。</p><p>用等号<code>=</code> 分隔<code>field key</code>-<code>field value</code>，中间不能有空格，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;field_key&gt;=&lt;field_value&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用逗号分隔多个 <code>field key</code>-<code>field value</code>对，中间不能有空格，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;field_key&gt;=&lt;field_value&gt;,&lt;field_key&gt;=&lt;field_value&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在该示例中，field set由一个field组成: <code>temperature=82</code>。如果向示例中添加另一个 field <code>humidity=71</code>，如下所示:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>weather,location=us-midwest temperature=82,humidity=71 1465839830100400200
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="空格-ii" tabindex="-1"><a class="header-anchor" href="#空格-ii" aria-hidden="true">#</a> 空格 II</h3><p>用空格分割field set和可选的时间戳。如果包含了时间戳，则line procotol 中必须使用空格。</p><h3 id="timestamp" tabindex="-1"><a class="header-anchor" href="#timestamp" aria-hidden="true">#</a> Timestamp</h3><p>数据point的时间戳，以ns为单位的Unix时间，时间戳在line protocol 中是可选的，如果没有为数据point 指定时间戳，则openGemini使用服务器的本地纳秒时间戳（以UTC为单位）。</p><p>在示例中，时间戳为<code>1465839830100400200（2016-06-13T17:43:50.1004002Z采用RFC3339格式）</code>，下面的line procotol是相同的数据point ，但没有时间戳，当openGemini将其写入数据库中，它将使用服务器的本地时间戳而不是<code>2016-06-13T17:43:50.1004002Z</code>。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>weather,location=us-midwest temperature=82
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用openGemini API可以以十亿分之一秒（例如微秒，毫秒或秒）以外的精度指定时间戳，建议使用最粗略的精度，因为这可以显著提高压缩率。</p><div class="hint-container tip"><p class="hint-container-title">设定提示</p><p>使用网咯时间协议（NTP）主机之间同步时间，openGemini使用UTC中主机的本地时间为数据分配的时间戳。如果主机的时钟与NTP同步，则写入openGemini的数据上的时间戳可能不准确。</p></div><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p><strong>measurements, tag keys, tag values, 和 field keys</strong>都必须是字符串。</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>因为openGemini将tag values存储为字符串，所以openGemini数据库不能对tag vlaues执行数学运算，此外，openGemini函数也不能接受tag value作为主要参数，在设计架构时考虑这些信息是个好主意。</p></div><p><strong>timestamp</strong>是UNIX时间戳。最小有效时间戳为<code>-9223372036854775806</code>或<code>1677-09-21T00:12:43.145224194Z</code>。最大有效时间戳为<code>9223372036854775806或2262-04-11t 23:47:16.85475806 z</code>。如上所述，默认情况下，openGemini假设时间戳为纳秒精度。有关如何指定替代精度，请参见<a href="">API接口</a>。</p><p><strong>field values</strong> 可以是<strong>浮点数</strong>、<strong>整数</strong>、<strong>字符串</strong>或者 <strong>booleans</strong>。</p><ul><li><p>浮点数 - 默认，openGemini假设所有数值字段值都是浮点。</p><p>将field value <code>82</code>存储为浮点数:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>weather,location=us-midwest temperature=82 1465839830100400200
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>整数 - 在field values中添加一个<code>i</code>来告诉openGemini存储整数。</p><p>将field value <code>82</code> 存储为整数:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>weather,location=us-midwest temperature=82i 1465839830100400200
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>字符串-双引号字符串field value(有关line procotol中引用的更多信息见 <a href="#Quoting">下方</a>)</p><p>将field value <code>too warm</code> 存储为字符串：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>weather,location=us-midwest temperature=&quot;too warm&quot; 1465839830100400200
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Booleans - 指定TRUE可以是t，T，true，True，或TRUE。指定FALSE可以是f，F，false，False，或FALSE。</p><p>将 field value <code>true</code> 存储为为 Boolean值：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>weather,location=us-midwest too_hot=true 1465839830100400200
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Note</p><p>可接受的booleans在数据写入和数据查询方面有所不同。</p></div></li></ul><p>在一个measurement中，同一个field不能写入不同的数据类型。</p><h2 id="quoting" tabindex="-1"><a class="header-anchor" href="#quoting" aria-hidden="true">#</a> Quoting</h2><p>本节介绍了在line procotol 中何时不使用双引号和何时将双引号 (<code>&quot;</code>) 或单引号 (<code>&#39;</code>)引起来。下面将从<strong>不能加引号</strong>到<strong>需要加引号</strong>的顺序分别介绍。</p>`,29),_=e("p",null,"不要用双引号或单引号引起时间戳。这不是有效的line procotol。",-1),q=e("p",null,"例:",-1),f=e("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[e("pre",{class:"language-sql"},[e("code",null,[e("span",{class:"token operator"},">>"),e("span",{class:"token operator"},">"),s(),e("span",{class:"token keyword"},"INSERT"),s(" weather"),e("span",{class:"token punctuation"},","),s("location"),e("span",{class:"token operator"},"="),s("us"),e("span",{class:"token operator"},"-"),s("midwest temperature"),e("span",{class:"token operator"},"="),e("span",{class:"token number"},"82"),s(),e("span",{class:"token string"},'"1465839830100400200"'),s(`
ERR: error parsing query: syntax error: unexpected IDENT
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),y=e("p",null,"通过 ts-cli，通不过语法检查，时间戳必须是整数类型。",-1),T=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[s("~"),e("span",{class:"token comment"},`# curl -X POST "http://localhost:8086/write?db=NOAA_water_database" --data-binary 'weather,location=us-midwest temperature=82 "1465839830100400200"'`),s(`
`),e("span",{class:"token punctuation"},"{"),e("span",{class:"token string"},'"error"'),e("span",{class:"token builtin class-name"},":"),e("span",{class:"token string"},[s('"cannot parse timestamp '),e("span",{class:"token entity",title:'\\"'},'\\"'),e("span",{class:"token entity",title:"\\\\"},"\\\\"),e("span",{class:"token entity",title:'\\"'},'\\"'),s("1465839830100400200"),e("span",{class:"token entity",title:"\\\\"},"\\\\"),e("span",{class:"token entity",title:'\\"'},'\\"'),e("span",{class:"token entity",title:'\\"'},'\\"'),s(': bad timestamp"')]),e("span",{class:"token punctuation"},"}"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),E=e("p",null,[s("通过API，则会报"),e("strong",null,"bad timestamp"),s("错误。")],-1),G=t(`<li><p>不能使用<strong>单引号</strong>引用字段值（即使它们是字符串)。这也不是有效的line procotol。</p><p>例:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">INSERT</span> weather<span class="token punctuation">,</span>location<span class="token operator">=</span>us<span class="token operator">-</span>midwest temperature<span class="token operator">=</span><span class="token string">&#39;toowarm&#39;</span>
ERR: {<span class="token string">&quot;error&quot;</span>:<span class="token string">&quot;cannot parse field value for \\&quot;temperature\\&quot;: invalid field value&quot;</span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>不建议对<strong>measurement名字</strong>, tag keys, <strong>tag values</strong>, 和 <strong>field keys</strong>使用单引号或者双引号。 它是一个有效的line procotol，但是 openGemini 会假设引号也是其中的一部分。</p><p>例:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>  <span class="token operator">&gt;</span> <span class="token keyword">INSERT</span> weather<span class="token punctuation">,</span>location<span class="token operator">=</span>us<span class="token operator">-</span>midwest temperature<span class="token operator">=</span><span class="token number">82</span> <span class="token number">1465839830100400200</span>
  <span class="token operator">&gt;</span> <span class="token keyword">INSERT</span> <span class="token string">&quot;weather&quot;</span><span class="token punctuation">,</span>location<span class="token operator">=</span>us<span class="token operator">-</span>midwest temperature<span class="token operator">=</span><span class="token number">87</span> <span class="token number">1465839830100400200</span>
  <span class="token operator">&gt;</span> <span class="token keyword">SHOW</span> MEASUREMENTS
  name: measurements
  <span class="token comment">------------------</span>
  name
  <span class="token string">&quot;weather&quot;</span>
  weather
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要查询<code>&quot;weather&quot;</code>中数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">&quot;\\&quot;weather\\&quot;&quot;</span>
name: <span class="token string">&quot;weather&quot;</span>
<span class="token comment">---------------</span>
<span class="token keyword">time</span>                            location     temperature
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">13</span>T17:<span class="token number">43</span>:<span class="token number">50.1004002</span>Z    us<span class="token operator">-</span>midwest   <span class="token number">87</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要查询<code>weather</code>中数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">&quot;weather&quot;</span>
name: <span class="token string">&quot;weather&quot;</span>
<span class="token comment">---------------</span>
<span class="token keyword">time</span>                            location     temperature
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">13</span>T17:<span class="token number">43</span>:<span class="token number">50.1004002</span>Z    us<span class="token operator">-</span>midwest   <span class="token number">82</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>不要对浮点数，整数或者<code>booleans</code>的 field values进行双引号，openGemini将假设这些值是字符串</p><p>例:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">INSERT</span> weather<span class="token punctuation">,</span>location<span class="token operator">=</span>us<span class="token operator">-</span>midwest temperature<span class="token operator">=</span><span class="token string">&quot;82&quot;</span>
<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> weather <span class="token keyword">WHERE</span> temperature <span class="token operator">&gt;=</span> <span class="token number">70</span>
<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对字符串field value进行双引号</p><p>例</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">INSERT</span> weather<span class="token punctuation">,</span>location<span class="token operator">=</span>us<span class="token operator">-</span>midwest temperature<span class="token operator">=</span><span class="token string">&quot;too warm&quot;</span>
<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> weather
name: weather
<span class="token comment">-------------</span>
<span class="token keyword">time</span>                            location     temperature
<span class="token number">2016</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">13</span>T19:<span class="token number">10</span>:<span class="token number">09.995766248</span>Z  us<span class="token operator">-</span>midwest   too warm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,4),I=t(`<h2 id="特殊字符和关键字" tabindex="-1"><a class="header-anchor" href="#特殊字符和关键字" aria-hidden="true">#</a> 特殊字符和关键字</h2><h3 id="特殊字符" tabindex="-1"><a class="header-anchor" href="#特殊字符" aria-hidden="true">#</a> 特殊字符</h3><p>对于 tag keys, tag value, 和 field keys 始终使用反斜杠 <code>\\</code>转义:</p><ul><li><p>逗号 <code>,</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>weather,location=us\\,midwest temperature=82 1465839830100400200
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>等号 <code>=</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>weather,location=us-midwest temp\\=rature=82 1465839830100400200
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>空格</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>weather,location\\ place=us-midwest temperature=82 1465839830100400200
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>对于measurements 请始终使用反斜杠 <code>\\</code>进行转义:</p><ul><li><p>逗号 <code>,</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>wea\\,ther,location=us-midwest temperature=82 1465839830100400200
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>空格</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>wea\\ ther,location=us-midwest temperature=82 1465839830100400200
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>对于字符串 field values 请使用反斜杠 <code>\\</code> 进行转义:</p><ul><li><p>双引号 <code>&quot;</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>weather,location=us-midwest temperature=&quot;too\\&quot;hot\\&quot;&quot; 1465839830100400200
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Line procotol 不要求用户转义反斜杠字符，但是如果非要这样做也没问题，例如，插入以下内容</p></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>weather,location=us-midwest temperature_str=&quot;too hot/cold&quot; 1465839830100400201
weather,location=us-midwest temperature_str=&quot;too hot\\cold&quot; 1465839830100400202
weather,location=us-midwest temperature_str=&quot;too hot\\\\cold&quot; 1465839830100400203
weather,location=us-midwest temperature_str=&quot;too hot\\\\\\cold&quot; 1465839830100400204
weather,location=us-midwest temperature_str=&quot;too hot\\\\\\\\cold&quot; 1465839830100400205
weather,location=us-midwest temperature_str=&quot;too hot\\\\\\\\\\cold&quot; 1465839830100400206
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将解释如下（请注意，单反斜杠和双反斜杠产生相同的记录）</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">&quot;weather&quot;</span>
name: weather
<span class="token keyword">time</span>                location   temperature_str
<span class="token comment">----                --------   ---------------</span>
<span class="token number">1465839830100400201</span> us<span class="token operator">-</span>midwest too hot<span class="token operator">/</span>cold
<span class="token number">1465839830100400202</span> us<span class="token operator">-</span>midwest too hot\\cold
<span class="token number">1465839830100400203</span> us<span class="token operator">-</span>midwest too hot\\cold
<span class="token number">1465839830100400204</span> us<span class="token operator">-</span>midwest too hot\\\\cold
<span class="token number">1465839830100400205</span> us<span class="token operator">-</span>midwest too hot\\\\cold
<span class="token number">1465839830100400206</span> us<span class="token operator">-</span>midwest too hot\\\\\\cold
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有其它特殊字符也不需要转义，例如，line procotol可以毫无问题的处理表情符号:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">INSERT</span> we⛅️ther<span class="token punctuation">,</span>location<span class="token operator">=</span>us<span class="token operator">-</span>midwest temper🔥ture<span class="token operator">=</span><span class="token number">82</span> <span class="token number">1465839830100400200</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&quot;we⛅️ther&quot;</span>
name: we⛅️ther
<span class="token operator">+</span><span class="token comment">---------------------+------------+--------------+</span>
<span class="token operator">|</span> <span class="token keyword">time</span>                <span class="token operator">|</span> location   <span class="token operator">|</span> temper🔥ture <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------------+------------+--------------+</span>
<span class="token operator">|</span> <span class="token number">1465839830100400200</span> <span class="token operator">|</span> us<span class="token operator">-</span>midwest <span class="token operator">|</span> <span class="token number">82</span>           <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------------+------------+--------------+</span>
<span class="token number">3</span> <span class="token keyword">columns</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字" aria-hidden="true">#</a> 关键字</h3><p>Line procotol 接受GeminiQL 关键字作为标识符名称。</p><p>通常，我们建议避免在架构中使用GeminiQL关键字，因为它可能在查询数据时引起confusion 。 关键字time是一种特殊情况。time可以是continuous query，数据库名称，measurement名称，retention policy 名称和用户名。</p><p><code>time</code>查询中不需要双引号。</p><p><code>time</code>不能是field key或tag key; openGemini拒绝使用<code>time</code>作为tag key的写入，否则返回错误。使用<code>time</code>作为field key写入，openGemini将忽略<code>time</code>字段。</p><h2 id="将数据写入opengemini" tabindex="-1"><a class="header-anchor" href="#将数据写入opengemini" aria-hidden="true">#</a> 将数据写入openGemini</h2><h3 id="在数据库中获取数据" tabindex="-1"><a class="header-anchor" href="#在数据库中获取数据" aria-hidden="true">#</a> 在数据库中获取数据</h3><p>现在，您已经了解openGemini line procotol的全部知识，实际上如何将line procotol 添加到openGemini，在这里将给出简单的示例。</p>`,21),R=e("p",null,"使用ts-cli命令将数据写入openGemini数据库，启动命令行界面（CLI）写入相关的数据库，并将Insert放在line procotol前面:",-1),L=e("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[e("pre",{class:"language-sql"},[e("code",null,[e("span",{class:"token keyword"},"INSERT"),s(" weather"),e("span",{class:"token punctuation"},","),s("location"),e("span",{class:"token operator"},"="),s("us"),e("span",{class:"token operator"},"-"),s("midwest temperature"),e("span",{class:"token operator"},"="),e("span",{class:"token number"},"82"),s(),e("span",{class:"token number"},"1465839830100400200"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),S=e("p",null,"也可以使用CLI从文件导入Line protocol数据。",-1),N=e("p",null,[s("参考"),e("a",{href:""},"ts-cli"),s("。")],-1),C=e("p",null,[s("使用openGemini API将数据写入openGemini，使用"),e("code",null,"POST"),s("向`/write方法发起请求，并在请求正文中提供您的line protocol：")],-1),A=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"curl"),s(),e("span",{class:"token parameter variable"},"-i"),s(),e("span",{class:"token parameter variable"},"-XPOST"),s(),e("span",{class:"token string"},'"http://localhost:8086/write?db=science_is_cool"'),s(" --data-binary "),e("span",{class:"token string"},"'weather,location=us-midwest temperature=82 1465839830100400200'"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),P=e("p",null,"批量写入数据：",-1),F=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"curl"),s(),e("span",{class:"token parameter variable"},"-i"),s(),e("span",{class:"token parameter variable"},"-XPOST"),s(),e("span",{class:"token string"},'"http://localhost:8086/write?db=db0"'),s(" --data-binary "),e("span",{class:"token string"},`'
weather,location=us-midwest temperature=82 1465839830100400200
weather,location=us-midwest temperature=83 1465839830100400300
weather,location=us-midwest temperature=84 1465839830100400400
'`),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),O=e("h3",{id:"重复points",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#重复points","aria-hidden":"true"},"#"),s(" 重复points")],-1),M=e("p",null,[s("point 由measurement名称，tag set，和timestamp唯一标识，如果提交具有相同measurement、tag set和timestamp的line procotol，但是使用不同的"),e("strong",null,"field set"),s("，field set就变成了旧field set和新field set的"),e("strong",null,"并集"),s("，如果存在field_key冲突，仅保留新的field set的数据。")],-1);function U(Z,B){const p=r("RouterLink"),c=r("ExternalLinkIcon"),d=r("Tabs");return m(),v("div",null,[k,e("p",null,[s("Line protocol 是一种基于文本的格式，用于将points写入数据库。 points 必须是Line protocol格式，才能成功解析和写point (除非你正在使用 "),n(p,{to:"/guide/write/prometheus.html"},{default:a(()=>[s("支持的协议")]),_:1}),s(").")]),h,e("p",null,[s("为了获得最佳性能，您应该在将<"),b,s(">排序后再发送到数据库。 排序函数参考 "),e("a",w,[s("Go bytes.Compare"),n(c)]),s(".")]),x,e("ul",null,[e("li",null,[_,q,n(d,{id:"189",data:[{title:"CLI"},{title:"API"}]},{tab0:a(({title:o,value:i,isActive:l})=>[f,y]),tab1:a(({title:o,value:i,isActive:l})=>[T,E]),_:1})]),G]),I,n(d,{id:"342",data:[{title:"CLI"},{title:"API"}]},{tab0:a(({title:o,value:i,isActive:l})=>[R,L,S,N]),tab1:a(({title:o,value:i,isActive:l})=>[C,A,P,F]),_:1}),O,M])}const Q=u(g,[["render",U],["__file","line_protocol_tutorials.html.vue"]]);export{Q as default};
