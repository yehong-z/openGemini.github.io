import{_ as t,X as l,Y as o,Z as a,a1 as s,$ as i,a0 as r,a3 as n,C as d}from"./framework-a4aa538b.js";const c={},p=a("h1",{id:"身份认证和授权",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#身份认证和授权","aria-hidden":"true"},"#"),s(" 身份认证和授权")],-1),u=a("h2",{id:"认证方式",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#认证方式","aria-hidden":"true"},"#"),s(" 认证方式")],-1),m=a("p",null,"openGemini API和openGemini CLI包含身份验证功能，启用身份验证后，openGemini仅执行验证通过的HTTP请求。",-1),v=n(`<li>默认情况下，配置文件中禁用身份验证，通过在配置文件中将<code>auth-enabled</code>选项设为<code>true</code>来开启身份验证。<div class="language-toml line-numbers-mode" data-ext="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">http</span><span class="token punctuation">]</span>  
<span class="token key property">auth-enabled</span> <span class="token punctuation">=</span> <span class="token boolean">true</span> <span class="token comment"># ✨</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>重新启动进程，openGemini将检查每个请求的用户信息，并将仅处理通过验证的用户请求。</li>`,2),h=n(`<h2 id="使用api进行验证" tabindex="-1"><a class="header-anchor" href="#使用api进行验证" aria-hidden="true">#</a> 使用API进行验证</h2><p>如果同时使用基本身份验证和URL查询参数进行身份验证，则查询参数中指定的用户凭据优先，以下示例中查询假定该用户是admin用户，有关不同用户类型，其特权以及有关用户管理的更多信息，请参见<a href="(../geminiql/sql_syntax/DCL)">SQL语法-DCL</a>的部分。</p><ul><li><p>Basic Authentication 验证</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-G</span> http://localhost:8086/query <span class="token parameter variable">-u</span> todd:<span class="token variable">\${YOUR_PWD}</span> --data-urlencode <span class="token string">&quot;q=SHOW DATABASES&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在URL中使用查询参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-G</span> <span class="token string">&quot;http://localhost:8086/query?u=todd&amp;p=<span class="token variable">\${YOUR_PWD}</span>&quot;</span> --data-urlencode <span class="token string">&quot;q=SHOW DATABASES&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在URL中使用请求正文</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-G</span> http://localhost:8086/query --data-urlencode <span class="token string">&quot;u=todd&quot;</span> --data-urlencode <span class="token string">&quot;p=<span class="token variable">\${YOUR_PWD}</span>&quot;</span> --data-urlencode <span class="token string">&quot;q=SHOW DATABASES&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="使用cli进行验证" tabindex="-1"><a class="header-anchor" href="#使用cli进行验证" aria-hidden="true">#</a> 使用CLI进行验证</h2><ul><li>在启动CLI时通过username和password进行身份验证<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ts-cli <span class="token parameter variable">-username</span> todd <span class="token parameter variable">-password</span> <span class="token variable">\${YOUR_PWD}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>启动CLI后使用auth命令进行验证<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> auth
username: todd  
password:  
<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">databases</span> 
name: <span class="token keyword">databases</span>
<span class="token operator">+</span><span class="token comment">---------------------+</span>
<span class="token operator">|</span> name                <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------------+</span>
<span class="token operator">|</span> NOAA_water_database <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------------+</span>
<span class="token number">1</span> <span class="token keyword">columns</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,5);function b(k,_){const e=d("RouterLink");return l(),o("div",null,[p,u,m,a("ol",null,[a("li",null,[s("创建至少一个管理员用户，有关如何创建管理员用户，请参见"),i(e,{to:"/zh/guide/geminiql/sql_syntax/DCL/create_user.html"},{default:r(()=>[s("SQL语法-DCL-CREATE USER")]),_:1}),s("。")]),v]),h])}const q=t(c,[["render",b],["__file","authentication_and_authorization.html.vue"]]);export{q as default};
